<model
  xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="true"
  xml.namespace="https://resources.infrastructurebuilder.org/IBExecutionResult/${apiVersion}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/IBExecutionResult-${apiVersion}"
  xsd.namespace="https://resources.infrastructurebuilder.org/IBExecutionResult/${apiVersion}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/IBExecutionResult/${apiVersion}"
>
  <id>checksum</id>
  <name>ProcessExecutionResultModel</name> <!-- Must be a single (no spaces, no dashes, no periods) identifier in order
    to create reader/writer -->
  <description>Model for ProcessExecution instances</description>

  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.util.executor.execution.model</value>
    </default>
  </defaults>

  <classes>
    <!-- MODEL -->
    <class
      xml.tagName="processExecutionResult"
      rootElement="true"
      java.clone="deep"
    >
      <name>GeneratedProcessExecutionResult</name>
      <description>Persistence for ibcore-executor ProcessExecutionResult instances</description>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>id</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Processing ID</description>
          <type>String</type>
        </field>
        <field>
          <name>start</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>String Instant of start time</description>
          <type>String</type>
        </field>
        <field>
          <name>runtime</name>
          <version>1.0.0+</version>
          <required>true</required>
          <type>String</type>
          <description>String Duration of run length</description>
        </field>
        <field>
          <name>resultCode</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Optional result code as a String</description>
          <type>String</type>
        </field>
        <field xdoc.separator="blank">
          <name>stdOut</name>
          <version>1.0.0+</version>
          <description>Stdout output</description>
          <type>List</type>
          <association xml.mapStyle="inline">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field xdoc.separator="blank">
          <name>stdErr</name>
          <version>1.0.0+</version>
          <description>StdErr output</description>
          <type>List</type>
          <association xml.mapStyle="inline">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field xdoc.separator="blank">
          <name>environment</name>
          <version>1.0.0+</version>
          <description>Execution Environment variables</description>
          <type>Properties</type>
          <association xml.mapStyle="inline">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field >
          <name>exception</name>
          <version>1.0.0+</version>
          <required>false</required>
          <association>
            <type>ThrowableModel</type>
            <multiplicity>1</multiplicity>
          </association>
          <description>Modeled exception </description>
        </field>
      </fields>

      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  public GeneratedProcessExecutionResult() {
    this.pe = null;
  }

  public GeneratedProcessExecutionResult(final org.infrastructurebuilder.util.executor.ProcessExecution pe2, java.util.Optional<Integer> exitCode, java.util.Optional<Throwable> exception2,
      java.time.Instant startTime, java.time.Duration between) {
    this.pe = pe2;
    this.id = pe2.getId();
    this.setStart(java.util.Objects.requireNonNull(startTime).toString());
    this.setRunningtimeAsDuration(java.util.Objects.requireNonNull(between));
    this.setEnvironment(pe.getExecutionEnvironment());
    this.setStdOut(pe.getStdOut().get());
    this.setStdErr(pe.getStdErr().get());
    this.setException(exception2.map(ThrowableModel::new).orElse(null));
    this.setResultCode(exitCode.map(e -> e.toString()).orElse(null));
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

            public java.util.Optional<Integer> getOptionalResultCode() {
              return java.util.Optional.ofNullable(this.resultCode).map(Integer::parseInt);
            }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private void setEnvironment(java.util.Map<String, String> env) {
        if (env != null) {
            java.util.Properties p = new java.util.Properties();
            env.forEach((k, v) -> p.setProperty(k, v));
            setEnvironment(p);
        }
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    public java.util.Optional<Throwable> getOptionalException() {
      return java.util.Optional.ofNullable(this.exception).map(ThrowableModel::toThrowable);
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    public java.time.Instant getStartTime() {
      return java.time.Instant.parse(getStart());
    }



            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    /**
     * Translate the Environment to a String/String map
     * @return
     */
    public java.util.Map<String,String> getExecutionEnvironment() {
      return getEnvironment().stringPropertyNames().stream().collect(java.util.stream.Collectors.toMap(k -> k,v -> this.environment.getProperty(v)));
    }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private final org.infrastructurebuilder.util.executor.ProcessExecution pe;
    public java.util.Optional<org.infrastructurebuilder.util.executor.ProcessExecution> getExecution() {
      return java.util.Optional.ofNullable(pe);
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    /**
     * Timeout as a duration
     * @return
     */
    public java.time.Duration getRunningtime() {
      return java.util.Optional.ofNullable(this.runtime).map(java.time.Duration::parse).orElse(java.time.Duration.ZERO);
    }

    public void setRunningtimeAsDuration(java.time.Duration d) {
      this.runtime = java.util.Objects.requireNonNull(d).toString();
    }



            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  public int hashCode() {
    return java.util.Objects.hash(id);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!(obj instanceof org.infrastructurebuilder.util.executor.ProcessExecutionResult))
      return false;
    org.infrastructurebuilder.util.executor.ProcessExecutionResult other = (org.infrastructurebuilder.util.executor.ProcessExecutionResult) obj;
    return java.util.Objects.equals(id, other.getId());
  }

            ]]>
          </code>
        </codeSegment>

      </codeSegments>

    </class>
    <class
      xml.tagName="exception"
      java.clone.hook="mutatingExceptionCloneHook"
      java.clone="deep"

    >
      <name>ThrowableModel</name>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>klass</name>
          <version>1.0.0+</version>
          <type>String</type>
          <required>true</required>
          <description>
            classname of exception
          </description>
        </field>
        <field>
          <name>message</name>
          <version>1.0.0+</version>
          <type>String</type>
          <description> detail message</description>
        </field>
        <field>
          <name>stack</name>
          <version>1.0.0+</version>
          <type>List</type>
          <association>
            <type>StackTraceModel</type>
            <multiplicity>*</multiplicity>
          </association>
          <description> Stack detail</description>
        </field>

      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  public ThrowableModel() {
  }

  ThrowableModel(Throwable t) {
    java.util.Objects.requireNonNull(t);
    this.setKlass(t.getClass().getName());
    this.setMessage(t.getMessage());
    this.setStack(java.util.Arrays.asList(t.getStackTrace()).stream().map(StackTraceModel::new).collect(java.util.stream.Collectors.toList()));
  }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

      private void mutatingExceptionCloneHook(ThrowableModel copy) {
      // TODO Auto-generated method stub

    }


            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public String toString()
  {
      return klass + ":" + message;
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  public Throwable toThrowable() {
    Class<?> klass = null;
    try {
      klass = Class.forName(getKlass());
      java.lang.reflect.Constructor<?> cons = (this.message != null) ?
          klass.getConstructor(String.class)
        : klass.getConstructor();
      Throwable t = (Throwable) cons.newInstance();
      t.setStackTrace(getStack().stream().map(StackTraceModel::toStackTrace)
          .collect(java.util.stream.Collectors.toList()).toArray(new StackTraceElement[getStack().size()]));
      return t;
    } catch (Exception e) {
      throw new RuntimeException("Cannot reproduce " + getKlass() + " instance", e);
    }
  }
            ]]>
          </code>
        </codeSegment>

      </codeSegments>

    </class>
    <class
      xml.tagName="stackTrace"
      java.clone.hook="mutatingSTCloneHook"
      java.clone="deep"

    >
      <name>StackTraceModel</name>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>declaringClass</name>
          <version>1.0.0+</version>
          <type>String</type>
          <required>true</required>
          <description>declaring classname of exception </description>
        </field>
        <field>
          <name>fileName</name>
          <version>1.0.0+</version>
          <type>String</type>
          <description> file name</description>
        </field>
        <field>
          <name>lineNumber</name>
          <version>1.0.0+</version>
          <type>int</type>
          <description> line</description>
        </field>
        <field>
          <name>methodName</name>
          <version>1.0.0+</version>
          <type>String</type>
          <description> method </description>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  public StackTraceElement toStackTrace()
  {
    return new StackTraceElement(getDeclaringClass(), getMethodName(), getFileName(), getLineNumber());
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private void mutatingSTCloneHook(StackTraceModel copy) {
      // TODO Auto-generated method stub
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    public StackTraceModel() {
    }

    StackTraceModel(StackTraceElement ste) {
      this.setDeclaringClass(ste.getClassName());
      this.setFileName(ste.getFileName());
      this.setLineNumber(ste.getLineNumber());
      this.setMethodName(ste.getMethodName());
    }


            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class
      locationTracker="locations"
      java.clone="shallow"
    >
      <name>ResultInputLocation</name>
      <version>1.0.0+</version>
      <fields>
        <!-- line, column and source fields are auto-generated by Modello -->
      </fields>
    </class>
    <class
      sourceTracker="source"
      java.clone="shallow"
    >
      <name>ResultInputSource</name>
      <version>1.0.0+</version>
      <fields>
      </fields>
    </class>
  </classes>
</model>