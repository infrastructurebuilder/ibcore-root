<model xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="false"
  xml.namespace="https://resources.infrastructurebuilder.org/IBResource/${apiVersion}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/IBDataSet-${apiVersion}"
  xsd.namespace="https://resources.infrastructurebuilder.org/IBResource/${apiVersion}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}">
  <id>ibresourcemodel</id>
  <name>IBResourceModel</name> <!-- Must be a single (no spaces, no dashes, no periods) identifier in order
    to create reader/writer -->
  <description>

  Model for IBResource, which underpins IBData among others.

  An IBResource is a representation of a (potentially unrealized) data resource.  This
  can be within a filesystem, or it can be a remote representation like an HTTPS or S3 reference
  or some other URL-like object.  IBResource instancess are purely models until realized.

  </description>

  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.util.readdetect.model</value>
    </default>
  </defaults>

  <classes>
    <!-- MODEL -->
    <class xml.tagName="resource" rootElement="false" java.clone="deep">
      <name>IBResourceModel</name>
      <description>Iterim persistence data for IBResource</description>
      <version>0.0.1+</version>
      <interfaces>
        <interface>${project.groupId}.util.readdetect.model.IBResourceModelIF</interface>
      </interfaces>
      <fields>
        <field xml.transient = "true">
          <name>filePath</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description><![CDATA[Path to the described file.  <b><i>Cached</i></b> IBResources require this be non-null, but the persistence model does not, because the source can be the means for acquiring the data.]]></description>
          <type>String</type>
        </field>
        <field xml.transient = "true">
          <name>cached</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Transient field (not persisted) to indicate that this is a cached value</description>
          <type>boolean</type>
          <default>false</default>
        </field>
        <field>
          <name>subPath</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>The path of the item relative to whatever RelativeRoot existed at read time</description>
          <type>String</type>
        </field>
        <field>
          <name>fileChecksum</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>Evaluated Checksum of the file</description>
          <type>String</type>
        </field>
        <field>
          <name>type</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>mime type of file</description>
          <type>String</type>
        </field>
        <field>
          <name>source</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>
          <![CDATA[Source URL-like.<BR/>
              This is where the stream ORIGINATED.<BR/>
              It is only used for realization, if possible, and for reference otherwise.<BR/>]]>
          </description>
          <type>String</type>
        </field>
        <field>
          <name>name</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>"Original" name of the resource</description>
          <type>String</type>
        </field>
        <field xml.transient = "true">
          <name>mostRecentReadTime</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>
            Most recent read time for the file, per the OS attributes.  This may not be
            valid on some filesystems.
          </description>
          <type>String</type>
        </field>
        <field >
          <name>lastUpdate</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Instant that file was updated, if possible</description>
          <type>String</type>
        </field>
        <field >
          <name>created</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Instant that [original] file was created, if possible.</description>
          <type>String</type>
        </field>
        <field >
          <name>realized</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Instant that [original] file was copied to relroot.  If null, the resource is considered unrealized.</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Description of resource</description>
          <type>String</type>
        </field>
        <field >
          <name>size</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>Length in bytes of resource (-1 means unknown)</description>
          <type>long</type>
          <default>-1L</default>
        </field>
        <field>
          <name>additionalProperties</name>
          <version>0.0.1+</version>
          <type>Properties</type>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.2.1+</version>
          <code>
            <![CDATA[
  public final static IBResourceModel modelFromJSON(org.json.JSONObject j) {
    IBResourceModel model = new IBResourceModel();
    model.setCreated(java.util.Objects.requireNonNull(j).optString(org.infrastructurebuilder.util.constants.IBConstants.CREATE_DATE, null));
    model.setFileChecksum(j.getString(org.infrastructurebuilder.util.core.ChecksumEnabled.CHECKSUM));
    model.setSize(j.getLong(org.infrastructurebuilder.util.constants.IBConstants.SIZE));
    model.setType(j.getString(org.infrastructurebuilder.util.constants.IBConstants.MIME_TYPE));
    model.setFilePath(j.optString(org.infrastructurebuilder.util.constants.IBConstants.PATH, null));
    model.setLastUpdate(j.optString(org.infrastructurebuilder.util.constants.IBConstants.UPDATE_DATE, null));
    model.setMostRecentReadTime(j.optString(org.infrastructurebuilder.util.constants.IBConstants.MOST_RECENT_READ_TIME, null));
    model.setName(j.optString(org.infrastructurebuilder.util.constants.IBConstants.SOURCE_NAME, null));
    model.setSource(j.optString(org.infrastructurebuilder.util.constants.IBConstants.SOURCE_URL, null));
    model.setDescription(j.optString(org.infrastructurebuilder.util.constants.IBConstants.DESCRIPTION, null));
    java.util.Optional.ofNullable(j.optJSONObject(org.infrastructurebuilder.util.constants.IBConstants.ADDITIONAL_PROPERTIES)).ifPresent(jo -> {
      jo.toMap().forEach((k, v) -> {
        model.addAdditionalProperty(k, v.toString());
      });
    });
    return model;
  }

            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <!-- MODEL -->
    <class xml.tagName="resourceCache" rootElement="true" java.clone="deep">
      <name>IBResourceCache</name>
      <description>Cache Holder for existing IBResources</description>
      <version>0.0.1+</version>
      <interfaces>
        <interface>${project.groupId}.util.readdetect.model.IBResourceCacheIF</interface>
      </interfaces>
      <fields>
        <field>
          <name>root</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description><![CDATA[Path of local RelativeRoot.  A cache must hold some root, but a simple set of IBResources need not have such a root.]]></description>
          <type>String</type>
        </field>
        <field >
          <name>description</name>
          <version>0.0.1+</version>
          <required>false</required>
          <description>Description of file</description>
          <type>String</type>
        </field>
        <field >
          <name>size</name>
          <version>0.0.1+</version>
          <required>true</required>
          <description>size of internal items.  This is a calculated value that has to be manually updated.</description>
          <type>long</type>
        </field>
        <field>
          <name>additionalProperties</name>
          <version>0.0.1+</version>
          <type>Properties</type>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>resources</name>
          <version>0.0.1+</version>
          <description>Cached Resources</description>
          <type>Set</type>
          <association>
            <type>IBResourceModel</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.2.1+</version>
          <code>
            <![CDATA[
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class locationTracker="locations" java.clone="shallow">
      <name>IBCPTInputLocation</name>
      <version>0.0.1+</version>
      <fields>
        <!-- line, column and source fields are auto-generated by Modello -->
      </fields>
    </class>
    <class sourceTracker="source" java.clone="shallow">
      <name>IBCPTInputSource</name>
      <version>0.0.1+</version>
      <fields>
      </fields>
    </class>
  </classes>
</model>