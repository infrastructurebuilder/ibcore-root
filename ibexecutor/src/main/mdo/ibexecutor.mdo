<model
  xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="false"
  xml.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/IBDataSet-${apiVersion}"
  xsd.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
>
  <id>checksum</id>
  <name>ProcessExecutionModel</name> <!-- Must be a single (no spaces, no dashes, no periods) identifier in order
    to create reader/writer -->
  <description>Model for ProcessExecution instances</description>

  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.util.execution.model</value>
    </default>
  </defaults>

  <classes>
    <!-- MODEL -->
    <class
      xml.tagName="processExecution"
      rootElement="true"
      java.clone.hook="mutatingCloneHook"
      java.clone="deep"
    >
      <name>DefaultProcessExecution</name>
      <description>Persistence for ibexecutor ProcessExecution instances</description>
      <version>1.0.0+</version>
      <interfaces>
        <interface>org.infrastructurebuilder.util.ProcessExecution</interface>
      </interfaces>
      <fields>
        <field>
          <name>id</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Processing ID</description>
          <type>String</type>
        </field>
        <field>
          <name>executable</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Path to executable</description>
          <type>String</type>
        </field>
        <field>
          <name>arguments</name>
          <version>1.0.0+</version>
          <required>true</required>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <description>Arguments passed to execution</description>
        </field>
        <field java.getter="false">
          <name>timeout</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Optional timeout</description>
          <type>String</type>
        </field>
        <field>
          <name>optional</name>
          <version>1.0.0+</version>
          <required>false</required>
          <defaultValue>false</defaultValue>
          <description>Is the successful execution of this optional</description>
          <type>boolean</type>
        </field>
        <field>
          <name>background</name>
          <version>1.0.0+</version>
          <required>false</required>
          <defaultValue>false</defaultValue>
          <description>Is the execution to be in the background</description>
          <type>boolean</type>
        </field>
        <field xdoc.separator="blank">
          <name>environment</name>
          <version>1.0.0+</version>
          <description>Environment variables</description>
          <type>Properties</type>
          <association xml.mapStyle="inline">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>exitValues</name>
          <version>1.0.0+</version>
          <required>false</required>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <description>"successful" exit codes(parsed as integers)</description>
        </field>
        <field java.getter="false">
          <name>stdOutPath</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Path to write stdout</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>stdErrPath</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Path to write stderr</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>stdInPath</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Path to read as stdin</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>root</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Path to Relative root</description>
          <type>String</type>
        </field>


      </fields>

      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private final java.io.PrintStream addl;
  public final java.util.Optional<java.io.PrintStream> getAdditionalPrintStream() {
    return java.util.Optional.ofNullable(this.addl);
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private void mutatingCloneHook(DefaultProcessExecution o) {
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  public DefaultProcessExecution() {
      this.addl = null;
      this.stdIn = null;
  }

  public DefaultProcessExecution(final String id, final String executable, final java.util.List<String> arguments,
      final java.util.Optional<java.time.Duration> timeout, final java.util.Optional<java.nio.file.Path> stdIn,
      final java.nio.file.Path workDirectory, final boolean optional,
      final java.util.Optional<java.util.Map<String, String>> environment,
      final java.util.Optional<java.nio.file.Path> relativeRoot,
      final java.util.Optional<java.util.List<Integer>> exitValues, final java.util.Optional<java.io.PrintStream> addl,
      final boolean background) {
    this.setId(id);
    this.setExecutable(executable);
    this.setArguments(arguments);
    this.setTimeout(java.util.Objects.requireNonNull(timeout).map(t -> t.toString()).orElse(null));
    this.stdIn = java.util.Objects.requireNonNull(stdIn).orElse(null);
    this.setWorkDirectory(workDirectory);
    this.setOptional(optional);
    this.setEnvironment(environment.orElse(null));
    this.setRelativeRoot(relativeRoot);
    this.setExitValuesAsIntegers(exitValues.orElse(org.infrastructurebuilder.util.ProcessExecution.DEFAULT_EXIT));
    this.addl = java.util.Objects.requireNonNull(addl).orElse(null);
    this.setBackground(background);
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private org.zeroturnaround.exec.ProcessExecutor executor = null;

  @Override
  public org.zeroturnaround.exec.ProcessExecutor getProcessExecutor() {
    if (this.executor == null)
      this.executor = org.infrastructurebuilder.util.ProcessExecution.super.getProcessExecutor();
    return this.executor;
  }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private void setEnvironment(java.util.Map<String, String> env) {
        if (env != null) {
            java.util.Properties p = new java.util.Properties();
            env.forEach((k, v) -> p.setProperty(k, v));
            setEnvironment(p);
        }
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private void setExitValuesAsIntegers(java.util.List<Integer> ev) {
    if (ev != null) {
      setExitValues(ev.stream().map(i -> i.toString()).collect(java.util.stream.Collectors.toList()));
    }
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    /**
     * Translate the Environment to a String/String map
     * @return
     */
    public java.util.Map<String,String> getExecutionEnvironment() {
      return getEnvironment().stringPropertyNames().stream().collect(java.util.stream.Collectors.toMap(k -> k,v -> this.environment.getProperty(v)));
    }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private java.nio.file.Path w = null;
    public java.nio.file.Path getWorkDirectory() {
      return java.util.Optional.ofNullable(this.w).orElseThrow(() -> new org.infrastructurebuilder.util.ProcessException("No work directory"));
    }
    public void setWorkDirectory(java.nio.file.Path w) {
      this.w = java.util.Objects.requireNonNull(w);
    }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    private final java.nio.file.Path stdIn;
    public java.util.Optional<java.nio.file.Path> getStdIn() {
      return java.util.Optional.ofNullable(this.stdIn);
    }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    private org.infrastructurebuilder.util.ListCapturingLogOutputStream stdOut;
    private org.infrastructurebuilder.util.ListCapturingLogOutputStream stdErr;
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    @Override
    public org.infrastructurebuilder.util.ListCapturingLogOutputStream getStdErr() {
      if (this.stdErr == null)
        this.stdErr = new org.infrastructurebuilder.util.ListCapturingLogOutputStream(getWorkDirectory().resolve(java.util.UUID.randomUUID().toString() + ".stderr"), getAdditionalPrintStream());
      return this.stdErr;
    }
    @Override
    public org.infrastructurebuilder.util.ListCapturingLogOutputStream getStdOut() {
      if (this.stdOut == null)
        this.stdOut = new org.infrastructurebuilder.util.ListCapturingLogOutputStream(getWorkDirectory().resolve(java.util.UUID.randomUUID().toString() + ".stdout"), getAdditionalPrintStream());
      return this.stdOut;
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    public java.util.Optional<java.nio.file.Path> getRelativeRoot() {
      return java.util.Optional.ofNullable(this.root).map(java.nio.file.Paths::get);
    }

    public void setRelativeRoot(java.util.Optional<java.nio.file.Path> relativeRoot) {
      this.root = relativeRoot.map(r -> r.toAbsolutePath().toString()).orElse(null);
    }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[


    @Override
    public void close() {
     try { stdOut.close(); } catch (Exception e) { }
     try { stdErr.close(); } catch (Exception e) { }
    }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    /**
     * Timeout as a duration
     * @return
     */
    public java.util.Optional<java.time.Duration> getTimeout() {
      return java.util.Optional.ofNullable(this.timeout).map(java.time.Duration::parse);
    }

    public void setTimeoutAsDuration(java.time.Duration d) {
      this.timeout = java.util.Objects.requireNonNull(d).toString();
    }

            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  public java.util.List<Integer> getExitValuesAsIntegers() {
    return getExitValues().stream().map(Integer::parseInt).collect(java.util.stream.Collectors.toList());
  }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>

    </class>
    <class
      locationTracker="locations"
      java.clone="shallow"
    >
      <name>IBExecInputLocation</name>
      <version>1.0.0+</version>
      <fields>
        <!-- line, column and source fields are auto-generated by Modello -->
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  @Override
  public String toString()
  {
      return getLineNumber() + " : " + getColumnNumber() + ", " + getSource();
  }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class
      sourceTracker="source"
      java.clone="shallow"
    >
      <name>IBExecInputSource</name>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>modelId</name>
          <version>1.0.0+</version>
          <type>String</type>
          <description>
            <![CDATA[
            The identifier of the deployment model in the format {@code <groupId>:<artifactId>:<version>}.
            ]]>
          </description>
        </field>
        <field>
          <name>location</name>
          <version>1.0.0+</version>
          <type>String</type>
          <description>
            <![CDATA[
            The path/URL of the deployment model or {@code null} if unknown.
            ]]>
          </description>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public String toString()
  {
      return getModelId() + " " + getLocation();
  }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
  </classes>
</model>